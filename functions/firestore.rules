rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    function hasAnyRole(roleList) {
      return isSignedIn() &&
             'roles' in request.auth.token && 
             request.auth.token.roles.hasAny(roleList);
    }

    function managesDepartmentOfNewDoc() {
      return isSignedIn() &&
             'managedDepartments' in request.auth.token &&
             request.auth.token.managedDepartments[request.resource.data.department] == true;
    }
    
    function managesDepartmentOfDoc() {
      return isSignedIn() &&
             'managedDepartments' in request.auth.token &&
             request.auth.token.managedDepartments[resource.data.department] == true;
    }
    
    function isOwnerOfDoc() {
      return request.auth.token.email == resource.data.userId;
    }
    
    function isCreatingForSelf() {
      return request.auth.token.email == request.resource.data.userId;
    }

    // --- Collection Rules ---

    match /configuration/{docId} {
      allow read: if isSignedIn();
      allow write: if hasAnyRole(['Director']);
    }

    match /users/{userEmail} {
      allow read: if isSignedIn();
      allow update: if (isSignedIn() && request.auth.token.email == userEmail) || hasAnyRole(['Director']);
      allow create, delete: if hasAnyRole(['Director', 'HR', 'HR Head', 'RegionalDirector']);

      
      match /documents/{docId} {
        allow read: if (isSignedIn() && request.auth.token.email == userEmail) || hasAnyRole(['Director', 'HR', 'HR Head', 'Finance']) || (request.auth.token.managedDepartments[get(/databases/$(database)/documents/users/$(userEmail)).data.primaryDepartment] == true);
        allow write: if hasAnyRole(['Director', 'HR', 'HR Head', 'Finance']) || (request.auth.token.managedDepartments[get(/databases/$(database)/documents/users/$(userEmail)).data.primaryDepartment] == true);
      }
      match /notifications/{docId} {
        allow read, write: if isSignedIn() && request.auth.token.email == userEmail;
      }
      match /leaveQuotas/{year} {
          allow get: if (isSignedIn() && request.auth.token.email == userEmail) ||
                         hasAnyRole(['Director', 'HR', 'HR Head']) ||
                         (
                           'managedDepartments' in request.auth.token &&
                           request.auth.token.managedDepartments[get(/databases/$(database)/documents/users/$(userEmail)).data.primaryDepartment] == true
                         );
          allow list: if hasAnyRole(['Director', 'HR', 'HR Head']);
          allow write: if (isSignedIn() && request.auth.token.email == userEmail) ||
                           hasAnyRole(['Director', 'HR', 'HR Head']) ||
                           (
                             'managedDepartments' in request.auth.token &&
                             request.auth.token.managedDepartments[get(/databases/$(database)/documents/users/$(userEmail)).data.primaryDepartment] == true
                           );
      }
    }

    match /requests/{docId} {
      allow get, update, delete: if isSignedIn() && (isOwnerOfDoc() || hasAnyRole(['Director', 'HR', 'HR Head']) || managesDepartmentOfDoc());
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isCreatingForSelf();
    }
    
    match /claims/{docId} {
      allow get, update, delete: if isSignedIn() && (isOwnerOfDoc() || hasAnyRole(['Director']) || managesDepartmentOfDoc());
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isCreatingForSelf();
    }

    match /purchaseRequests/{docId} {
      allow get, update, delete: if isSignedIn() && (isOwnerOfDoc() || hasAnyRole(['Director']) || managesDepartmentOfDoc());
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isCreatingForSelf();
    }

    match /supportRequests/{docId} {
      allow create: if isSignedIn() && request.auth.token.email == request.resource.data.requesterId;
      allow get, update, delete: if isSignedIn() && (request.auth.token.email == resource.data.requesterId || hasAnyRole(['Director', 'IT']));
      allow list: if isSignedIn();
    }

    match /attendance/{docId} {
      allow get: if isSignedIn() && (isOwnerOfDoc() || hasAnyRole(['Director', 'HR', 'HR Head']) || managesDepartmentOfDoc());
      allow list: if isSignedIn();
      allow create: if isSignedIn() && (isCreatingForSelf() || hasAnyRole(['Director', 'HR', 'HR Head']) || managesDepartmentOfNewDoc());
      // FIXED: Removed stray comma from the end of the hasAnyRole list
      allow update, delete: if isSignedIn() && (isOwnerOfDoc() || hasAnyRole(['Director', 'HR', 'HR Head']) || managesDepartmentOfDoc());
    }

    match /attendanceExceptions/{docId} {
      allow create: if true; // Created by backend function
      allow get: if isSignedIn() && (isOwnerOfDoc() || hasAnyRole(['Director', 'HR', 'HR Head']) || managesDepartmentOfDoc());
      allow list: if isSignedIn();
      allow update: if (hasAnyRole(['Director', 'HR', 'HR Head']) || managesDepartmentOfDoc()) || (isOwnerOfDoc() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['acknowledged']));
    }
    
    match /announcements/{announcementId} {
      allow read, list: if isSignedIn();
      allow create: if hasAnyRole(['Director']) ||
        (
          'managedDepartments' in request.auth.token &&
          request.resource.data.targetDepartments.size() > 0 &&
          request.resource.data.targetDepartments.removeAll(request.auth.token.managedDepartments.keys()).size() == 0
        );
      allow update, delete: if isSignedIn() && (resource.data.creatorId == request.auth.token.email || hasAnyRole(['Director']));

      match /acknowledgements/{userEmail} {
        allow get: if isSignedIn() && request.auth.token.email == userEmail;
        allow list: if hasAnyRole(['Director']);
        allow create: if isSignedIn() && request.auth.token.email == userEmail;
        allow update, delete: if false;
      }
    }
    
    match /userAlerts/{alertId} {
      // A user can read or query for their own alerts.
      allow read: if isSignedIn() && request.auth.token.email == resource.data.userId;
      
      // A user can only update the 'acknowledged' field of their own alert.
      allow update: if isSignedIn() && request.auth.token.email == resource.data.userId &&
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['acknowledged']);
      
      // No one can create or delete alerts from the client side.
      allow create, delete: if false;
    }

    match /companyCalendar/{date} {
      allow read: if isSignedIn();
      
      allow create, update: if (
        hasAnyRole(['Director', 'Admin'])
      ) || (
        hasAnyRole(['HR', 'HR Head', 'RegionalDirector']) &&
        !request.resource.data.appliesTo.hasAny(['__ALL__']) &&
        request.resource.data.appliesTo.removeAll(request.auth.token.managedDepartments.keys()).size() == 0
      );

      allow delete: if
        hasAnyRole(['Director', 'Admin']) ||
        (
          hasAnyRole(['HR', 'HR Head', 'RegionalDirector']) &&
          resource.data.appliesTo.removeAll(request.auth.token.managedDepartments.keys()).size() == 0
        );
    }
  }
}