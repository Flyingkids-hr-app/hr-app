rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    match /{allPaths=**} {
      allow read: if request.auth != null;
    }

    // --- START: FINAL, RELIABLE user-documents RULE ---
    match /user-documents/{targetUserId}/{fileName} {
      allow delete: if request.auth != null && request.auth.token.roles.hasAny(['Director']);
      
      allow write: if request.auth != null &&
                   (
                      request.auth.token.roles.hasAny(['Director']) ||
                      (
                        request.auth.token.roles.hasAny(['RegionalDirector', 'HR Head', 'HR', 'Finance', 'DepartmentManager']) &&
                        // This rule now checks the metadata sent with the file
                        // against the manager's secure permission token.
                        request.resource.metadata.targetUserDepartment in request.auth.token.managedDepartments
                      )
                   );
    }
    // --- END: FINAL, RELIABLE user-documents RULE ---

    match /announcement-images/{fileName} {
      allow write: if request.auth != null;
    }
    
    match /purchase-receipts/{userId}/{fileName} {
       allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /leave-documents/{userId}/{fileName} {
       allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /receipts/{userId}/{fileName} {
       allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /support-ticket-attachments/{userId}/{fileName} {
      allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
}